#!/bin/bash

readonly valid_resources=('blueutil' 'cpulimit' 'exiftool' 'ffmpeg' 'mediainfo' 'trash' 'youtubedl') # Keep in sync with resource functions
readonly shared_resources_id='com.vitorgalvao.alfred._sharedresources'
[[ -z "${alfred_workflow_data}" ]] && readonly alfred_workflow_data="$(mktemp -d)/Workflow Data/fake_workflow" # To prevent commands reliant on this variable from breaking when testing outside a Workflow
readonly shared_resources_dir="$(dirname "${alfred_workflow_data}")/${shared_resources_id}"
readonly shared_resources_bin="${shared_resources_dir}/bin"
readonly PATH=/usr/local/bin:"${shared_resources_bin}":"${PATH}"

function is_string_in_array {
  local -r string="${1}"

  for value in "${@:2}"; do
    [[ "${string}" == "${value}" ]] && return 0
  done

  return 1
}

function curl_error {
  echo "Could not download ${1}." >&2
  exit 1
}

function ensure_resources_dir {
  [[ -d "${shared_resources_bin}" ]] || mkdir -p "${shared_resources_bin}"
}

function mount_dmg {
  local -r dmg_path="${1}"
  local -r plist="$(mktemp)" # We need to make the plist into a file so PlistBuddy will read it

  hdiutil mount -plist -nobrowse -readonly -mountrandom "$(mktemp -d)" "${dmg_path}" > "${plist}"

  local -r dicts="$(/usr/libexec/PlistBuddy -c 'print system-entities' "${plist}" | grep --count 'Dict')"

  for i in $(seq 0 "$(bc <<< "${dicts} - 1")") ; do
    /usr/libexec/PlistBuddy -c "print system-entities:${i}:mount-point" "${plist}" 2>/dev/null
  done
}

function unmount_dmg {
  hdiutil unmount "${1}" > /dev/null
}

# Resource functions
function blueutil_getter {
  local blueutil_path
  blueutil_path="$(command -v 'blueutil')"

  if [[ -z "${blueutil_path}" ]]; then
    blueutil_path="${shared_resources_bin}/blueutil"
    local -r blueutil_version='2.5.1'
    local -r tar_extract="$(mktemp -d)"

    ensure_resources_dir

    if curl --silent "https://homebrew.bintray.com/bottles/blueutil-${blueutil_version}.mojave.bottle.tar.gz" | tar xC "${tar_extract}"; then
      mv "${tar_extract}/blueutil/${blueutil_version}/bin/blueutil" "${blueutil_path}"
      chmod +x "${blueutil_path}"
    else
      curl_error 'blueutil'
    fi
  fi
}

function cpulimit_getter {
  local cpulimit_path
  cpulimit_path="$(command -v 'cpulimit')"

  if [[ -z "${cpulimit_path}" ]]; then
    cpulimit_path="${shared_resources_bin}/cpulimit"
    local -r cpulimit_version='0.2'
    local -r tar_extract="$(mktemp -d)"

    ensure_resources_dir

    if curl --silent "https://homebrew.bintray.com/bottles/cpulimit-${cpulimit_version}.sierra.bottle.tar.gz" | tar xC "${tar_extract}"; then
      mv "${tar_extract}/cpulimit/${cpulimit_version}/bin/cpulimit" "${cpulimit_path}"
      chmod +x "${cpulimit_path}"
    else
      curl_error 'cpulimit'
    fi
  fi
}

function exiftool_getter {
  local exiftool_path
  exiftool_path="$(command -v 'exiftool')"

  function get_exiftool {
    exiftool_path="${shared_resources_bin}/exiftool"
    local -r tar_extract="$(mktemp -d)"
    local -r lib_dir="${shared_resources_dir}/exiftool"
    local -r latest_tag="$(curl --silent 'https://api.github.com/repos/exiftool/exiftool/tags' | grep 'tarball_url' | head -1 | sed -E 's/.*: "(.*)".*/\1/')"

    ensure_resources_dir

    if curl --location --silent "${latest_tag}" | tar xC "${tar_extract}"; then
      mv "${tar_extract}/"* "${lib_dir}"
      ln -s "${lib_dir}/exiftool" "${exiftool_path}"
    else
      curl_error 'exiftool'
    fi
  }

  if [[ -n "${exiftool_path}" ]]; then
    [[ "${exiftool_path}" == *"${shared_resources_id}"* ]] && [[ $(find "${exiftool_path}" -mtime +90) ]] && get_exiftool
  else
    ensure_resources_dir
    get_exiftool
  fi
}

function ffmpeg_getter {
  local ffmpeg_path
  ffmpeg_path="$(command -v 'ffmpeg')"

  function get_ffmpeg {
    ffmpeg_path="${shared_resources_bin}/ffmpeg"
    local -r download_page='https://evermeet.cx/pub/ffmpeg/'
    local -r file_name="$(curl --silent "${download_page}" | grep '.dmg' | grep --invert-match '.sig' | head -1 | sed -E 's/.*<a href="(.*)".*/\1/')"
    local -r dmg="$(mktemp)"

    if curl --silent --output "${dmg}" "${download_page}${file_name}"; then
      local -r dmg_mount_point="$(mount_dmg "${dmg}")"
      cp "${dmg_mount_point}/ffmpeg" "${ffmpeg_path}"
      unmount_dmg "${dmg_mount_point}"
    else
      curl_error 'ffmpeg'
    fi
  }

  if [[ -n "${ffmpeg_path}" ]]; then
    [[ "${ffmpeg_path}" == *"${shared_resources_id}"* ]] && [[ $(find "${ffmpeg_path}" -mtime +90) ]] && get_ffmpeg
  else
    ensure_resources_dir
    get_ffmpeg
  fi
}

function mediainfo_getter {
  local mediainfo_path
  mediainfo_path="$(command -v 'mediainfo')"

  function get_mediainfo {
    mediainfo_path="${shared_resources_bin}/mediainfo"
    local -r file_name="$(curl --silent 'https://mediaarea.net/en/MediaInfo/Download/Mac_OS' | grep 'CLI.*.dmg' | head -1 | sed -E 's/.*<a href="(.*)".*/\1/')"
    local -r dmg="$(mktemp)"
    local -r pkg_extract="$(mktemp -d)"

    if curl --silent --output "${dmg}" "https:${file_name}"; then
      local -r dmg_mount_point="$(mount_dmg "${dmg}")"
      cd "${pkg_extract}" || exit 1
      xar -xf "${dmg_mount_point}/mediainfo.pkg"
      gunzip --decompress --stdout 'Payload' | cpio -i 2> /dev/null
      cp './usr/local/bin/mediainfo' "${mediainfo_path}"
      unmount_dmg "${dmg_mount_point}"
      cd - > /dev/null || exit 1
    else
      curl_error 'mediainfo'
    fi
  }

  if [[ -n "${mediainfo_path}" ]]; then
    [[ "${mediainfo_path}" == *"${shared_resources_id}"* ]] && [[ $(find "${mediainfo_path}" -mtime +90) ]] && get_mediainfo
  else
    ensure_resources_dir
    get_mediainfo
  fi
}

function trash_getter {
  local trash_path
  trash_path="$(command -v 'trash')"

  if [[ -z "${trash_path}" ]]; then
    trash_path="${shared_resources_bin}/trash"
    local -r trash_version='0.9.2'
    local -r tar_extract="$(mktemp -d)"

    ensure_resources_dir

    if curl --silent "https://homebrew.bintray.com/bottles/trash-${trash_version}.sierra.bottle.tar.gz" | tar xC "${tar_extract}"; then
      mv "${tar_extract}/trash/${trash_version}/bin/trash" "${trash_path}"
      chmod +x "${trash_path}"
    else
      curl_error 'trash'
    fi
  fi
}

function youtubedl_getter {
  local youtubedl_path
  youtubedl_path="$(command -v 'youtube-dl')"

  if [[ -n "${youtubedl_path}" ]]; then
    [[ "${youtubedl_path}" == *"${shared_resources_id}"* ]] && [[ $(find "${youtubedl_path}" -mtime +15) ]] && "${youtubedl_path}" --update --quiet
  else
    ensure_resources_dir
    youtubedl_path="${shared_resources_bin}/youtube-dl"

    if curl --silent --location 'https://yt-dl.org/downloads/latest/youtube-dl' --output "${youtubedl_path}"; then
      chmod +x "${youtubedl_path}"
    else
      curl_error 'youtubedl'
    fi
  fi
}

for argv in "${@}"; do
  resources_to_use+=("${argv}")
done

# Check if arguments are valid
for resource in "${resources_to_use[@]}"; do
  if ! is_string_in_array "${resource}" "${valid_resources[@]}"; then
    echo "
      Could not recognise argument ${1}. It needs to be one or more of:
        $(printf "\n  %s" "${valid_resources[@]}")
    " | sed -E 's/^ {6}//' >&2

    exit 1
  fi
done

# Get resources
for resource in "${resources_to_use[@]}"; do
  "${resource}_getter" # Run the function to get the tool. '_getter' is required as otherwise the function will detect itself when running 'command'
done

echo -n "${PATH}"